CREATE QUERY cc_subquery (VERTEX source, SET<STRING> v_type, SET<STRING> e_type,
 INT num_vert, INT max_hops, BOOL wf = TRUE)  RETURNS (FLOAT) {
  /*
  Subquery returns closeness centrality for vertex source in graph with numVert vertices
  wf: Wasserman and Faust normalization factor for multi-component graphs 
  */
	SumAccum<INT> @@currDist, @@totalDist;
	SumAccum<INT> @@n;                       // vertices in this component
	OrAccum<BOOL> @visited;

	# Initialize: Set the input vertex source as the starting point
	Start = {source};
	Start = SELECT s FROM Start:s
			ACCUM s.@visited += true;

	# totalDist = sum(distance between vertex s and all connected neighbors)
	WHILE (Start.size() > 0) LIMIT max_hops DO    # explore up to (maxHops) hops FROM s
			@@currDist += 1;
			# Move FROM current start set to the neighboring set of (unvisited) vertices
			Start = SELECT t FROM Start:s -(e_type:e)-> v_type:t
					WHERE t.@visited == false AND t != s
					POST-ACCUM t.@visited += true;
							   @@totalDist += Start.size() * @@currDist;
			@@n += Start.size();
	END;

	IF @@totalDist > 0 THEN
			IF wf == TRUE THEN
					RETURN (@@n*1.0/(num_vert-1))*(@@n*1.0/@@totalDist);
			ELSE 
					RETURN (@@n*1.0/@@totalDist);
			END;
	ELSE
			RETURN (-1.0);
	END;
 }